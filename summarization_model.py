# -*- coding: utf-8 -*-
"""Copy of vid-trial.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/18_qGvaulpG2T3JXZ65koqssVguHlg0qH
"""

# !pip install --q transformers==4.5.0
# !pip install --q pytorch-lightning==1.2.7

!pip install --quiet transformers pytorch-lightning scikit-learn termcolor

!pip install transformers==4.28.0

import transformers
print(transformers.__version__)

from transformers import AdamW

import json
import pandas as pd
import numpy as np
import torch
from pathlib import Path
from torch.utils.data import Dataset, DataLoader
import pytorch_lightning as pl
from pytorch_lightning.callbacks import ModelCheckpoint
from pytorch_lightning.loggers import TensorBoardLogger
from sklearn.model_selection import train_test_split
from termcolor import colored
import textwrap
from transformers import (
    AdamW,
    T5ForConditionalGeneration,
    T5TokenizerFast as T5Tokenizer
)

!gdown --id 1xzZAZbhw84nb16DYDXpR0ANwwTo5QCwB

!unzip -q /content/news_summary.zip -d data

# Commented out IPython magic to ensure Python compatibility.
import seaborn as sns
from pylab import rcParams
import matplotlib.pyplot as plt
from matplotlib import rc

# %matplotlib inline
# %config InlineBackend. figure_format=' retina'
sns.set(style='whitegrid', palette='muted', font_scale=1.2)
rcParams ['figure.figsize'] = 16, 10

pl.seed_everything(42)

df = pd.read_csv('/content/data/news_summary.csv', encoding='latin-1')
df.head()

df = df[['text', 'ctext']]
df.columns = ['summary', 'text']
df = df.dropna()
df.head()

train_df, test_df = train_test_split(df, test_size=0.1)
train_df.shape, test_df.shape,

class NewSummaryDataset(Dataset):
    def __init__(
        self,
        data: pd.DataFrame,
        tokenizer: T5Tokenizer,
        text_max_token_len: int = 512,
        summary_max_token_len: int = 128
    ):
        self.tokenizer = tokenizer
        self.data = data
        self.text_max_token_len = text_max_token_len
        self.summary_max_token_len = summary_max_token_len

    def __len__ (self):
        return len(self.data)

    def __getitem__(self, index: int):
        data_row = self. data.iloc[index]
        text = data_row['text']
        text_encoding = tokenizer(
            text,
            max_length=self.text_max_token_len,
            padding="max_length",
            truncation=True,
            return_attention_mask=True,
            add_special_tokens=True,
            return_tensors="pt"
        )

        summary_encoding = tokenizer(
            data_row['summary'],
            max_length=self.summary_max_token_len,
            padding="max_length",
            truncation=True,
            return_attention_mask=True,
            add_special_tokens=True,
            return_tensors="pt"
        )

        labels = summary_encoding['input_ids']
        labels[labels == 0] = -100

        return dict(
          text=text,
          summary=data_row["summary"],
          text_input_ids=text_encoding["input_ids"].flatten(),
          text_attention_mask=text_encoding["attention_mask"].flatten(),
          labels=labels.flatten(),
          labels_attention_mask=summary_encoding["attention_mask"].flatten()
        )

class NewsSummaryDataModule(pl.LightningDataModule):
        def __init__(
            self,
            train_df: pd.DataFrame,
            test_df: pd.DataFrame,
            tokenizer: T5Tokenizer,
            batch_size: int = 8,
            text_max_token_len: int = 512,
            summary_max_token_len: int = 128
        ):

            super().__init__()

            self.train_df = train_df
            self.test_df = test_df
            self.batch_size = batch_size
            self.tokenizer = tokenizer
            self.text_max_token_len = text_max_token_len
            self.summary_max_token_len = summary_max_token_len

        def setup(self, stage=None):
            self.train_dataset = NewSummaryDataset(
                self.train_df,
                self.tokenizer,
                self.text_max_token_len,
                self.summary_max_token_len
            )

            self.test_dataset = NewSummaryDataset(
                self.test_df,
                self.tokenizer,
                self.text_max_token_len,
                self.summary_max_token_len
            )

        def train_dataloader(self):
            return DataLoader(
                self.train_dataset,
                batch_size=self.batch_size,
                shuffle=True,
                num_workers=2
            )

        def val_dataloader(self):
          return DataLoader(
                self.test_dataset,
                batch_size=self.batch_size,
                shuffle=False,
                num_workers=2
            )

        def test_dataloader(self):
            return DataLoader(
                self.test_dataset,
                batch_size=self.batch_size,
                shuffle=False,
                num_workers=2
            )

MODEL_NAME = 't5-base'
tokenizer = T5Tokenizer.from_pretrained(MODEL_NAME)

text_token_counts, summary_token_counts = [], []
for _, row in train_df.iterrows ():
    text_token_count = len(tokenizer.encode(row["text"]))
    text_token_counts.append(text_token_count)
    summary_token_count = len(tokenizer.encode(row["summary"]) )
    summary_token_counts.append(summary_token_count)

N_EPOCHS = 3
BATCH_SIZE = 8
data_module = NewsSummaryDataModule(train_df, test_df, tokenizer, batch_size=BATCH_SIZE)

class NewSummaryModel(pl.LightningModule):
    def __init__(self):
        super().__init__()
        self.model = T5ForConditionalGeneration.from_pretrained(MODEL_NAME, return_dict=True)

    def forward(self, input_ids, attention_mask, decoder_attention_mask, labels=None):
        output = self.model (
            input_ids,
            attention_mask=attention_mask,
            labels=labels,
            decoder_attention_mask=decoder_attention_mask
        )
        return output.loss, output.logits

    def training_step(self, batch, batch_idx):
        input_ids = batch["text_input_ids"]
        attention_mask = batch["text_attention_mask"]
        labels = batch["labels"]
        labels_attention_mask = batch["labels_attention_mask"]

        loss, outputs = self(
            input_ids=input_ids,
            attention_mask=attention_mask,
            decoder_attention_mask=labels_attention_mask,
            labels=labels
        )
        self.log('train_loss', loss, prog_bar = True, logger =True)
        return loss

    def validation_step(self, batch, batch_idx):
        input_ids = batch["text_input_ids"]
        attention_mask = batch["text_attention_mask"]
        labels = batch["labels"]
        labels_attention_mask = batch["labels_attention_mask"]

        loss, outputs = self(
            input_ids=input_ids,
            attention_mask=attention_mask,
            decoder_attention_mask=labels_attention_mask,
            labels=labels
        )
        self.log('validation_loss', loss, prog_bar=True, logger=True)
        return loss

    def test_step(self, batch, batch_idx):
        input_ids = batch["text_input_ids"]
        attention_mask = batch["text_attention_mask"]
        labels = batch["labels"]
        labels_attention_mask = batch["labels_attention_mask"]

        loss, outputs = self(
            input_ids=input_ids,
            attention_mask=attention_mask,
            decoder_attention_mask=labels_attention_mask,
            labels=labels
        )
        self.log('test_loss', loss, prog_bar=True, logger=True)
        return loss

    def configure_optimizers (self):
      return AdamW(self.parameters(), lr=0.0001)

model = NewSummaryModel()

# Commented out IPython magic to ensure Python compatibility.
# %load_ext tensorboard
# %tensorboard --logdir ./lightning_logs

checkpoint_callback = ModelCheckpoint(
    dirpath="checkpoints",
    filename="best-checkpoint",
    save_top_k=1,
    verbose=True,
    monitor="validation_loss",
    mode="min"
)

logger = TensorBoardLogger("lightning_logs", name="news-summary")  # note underscore in path

trainer = pl.Trainer(
    logger=logger,
    callbacks=[checkpoint_callback],
    max_epochs=N_EPOCHS,
    accelerator="gpu",     # updated
    devices=1,             # updated
    enable_progress_bar=True
)

trainer.fit(model, data_module)

trained_model = NewSummaryModel.load_from_checkpoint(
  trainer.checkpoint_callback.best_model_path
)

trained_model.freeze()

def summarize(text, max_length=128, num_beams=4, device="cuda:0"):

    inputs = tokenizer(
        text,
        max_length=512,
        padding="max_length",
        truncation=True,
        return_attention_mask=True,
        return_tensors="pt"
    )

    input_ids = inputs["input_ids"].to(device)
    attention_mask = inputs["attention_mask"].to(device)

    with torch.no_grad():
        outputs = model.model.generate(
            input_ids=input_ids,
            attention_mask=attention_mask,
            max_length=max_length,
            num_beams=num_beams,
            early_stopping=True
        )

    summary = tokenizer.decode(outputs[0], skip_special_tokens=True)
    return summary

model.to("cuda:0")

sample_row = test_df.iloc[0]
text = sample_row["text"]
summary = sample_row["summary"]

repo_id = "SalmaSherif202200622/Summarization_NLP_model"
model_version = "v1"

def summarize_text(text, model, tokenizer, max_length=128, num_beams=4, device="cuda:0"):
    """Generate a summary for the input text using the T5 model."""
    inputs = tokenizer(
        text,
        max_length=512,
        padding="max_length",
        truncation=True,
        return_tensors="pt"
    ).to(device)
    with torch.no_grad():
        outputs = model.generate(
            input_ids=inputs["input_ids"],
            attention_mask=inputs["attention_mask"],
            max_length=max_length,
            num_beams=num_beams,
            early_stopping=True
        )
    summary = tokenizer.decode(outputs[0], skip_special_tokens=True)
    return summary

# Load model and tokenizer from Hugging Face
try:
    model = T5ForConditionalGeneration.from_pretrained(repo_id)
    tokenizer = T5Tokenizer.from_pretrained(repo_id)
except Exception as e:
    print(f"Error loading model or tokenizer: {e}")
    exit(1)

device = "cuda:0" if torch.cuda.is_available() else "cpu"
model.to(device)
model.eval()

summary = summarize_text(text, model, tokenizer, device=device)
print("\nExample Summary:")
print(f"Input Text: {text[:100]}...")
print(f"Generated Summary: {summary}")

    print("Test dataset not found. Please upload test_summary.csv")
    uploaded = files.upload()
    if "test_summary.csv" not in uploaded:
        print("Error: test_summary.csv not uploaded. Exiting.")
        exit(1)
    with open(test_csv_path, "wb") as f:
        f.write(uploaded["test_summary.csv"])

predictions = []
references = []
for _, row in test_df.iterrows():
    text = row["text"]  # Adjust column name if different (e.g., "article")
    ref_summary = row["summary"]  # Adjust column name if different
    pred_summary = summarize_text(text, model, tokenizer, device=device)
    predictions.append(pred_summary)
    references.append(ref_summary)

# Compute ROUGE scores
scorer = rouge_scorer.RougeScorer(['rouge1', 'rouge2', 'rougeL'], use_stemmer=True)
rouge_scores = {"rouge1": [], "rouge2": [], "rougeL": []}
for pred, ref in zip(predictions, references):
    scores = scorer.score(ref, pred)
    for key in rouge_scores:
        rouge_scores[key].append(scores[key].fmeasure)

avg_rouge = {key: sum(scores) / len(scores) for key, scores in rouge_scores.items()}
print("\nEvaluation Metrics:")
print(f"Average ROUGE Scores: {avg_rouge}")

